import{s as S,g as o}from"./storage.js";let r=null,p=Date.now(),k=new Set;const l={isActive:!1,isPaused:!1,timeLeft:15*60,mode:"custom",interval:15,isBlinking:!1,startTime:null,endTime:null},T={interval:15,soundEnabled:!0,theme:"light",soundVolume:50,autoStartTimer:!1,showQuotes:!0,quoteChangeInterval:60,selectedSound:"gentle-bell",timerMode:"focus",quoteCategory:"all",minimalMode:!1};chrome.runtime.onInstalled.addListener(async()=>{await S({...T,timerState:l}),console.log("[Background] Extension installed and default settings set.")});chrome.action.onClicked.addListener(()=>{chrome.windows.create({url:"index.html",type:"popup",width:400,height:600,focused:!0})});chrome.tabs.onRemoved.addListener(e=>{k.delete(e)});chrome.tabs.onUpdated.addListener(async(e,a,t)=>{if(a.status==="complete"&&t.url){const{timerState:i}=await o(["timerState"]);if(i!=null&&i.isActive)try{await s()}catch(n){console.error(`Failed to handle tab update for ${e}:`,n)}}});chrome.tabs.onActivated.addListener(async()=>{A();const{timerState:e}=await o(["timerState"]);if(e!=null&&e.isActive)try{await s()}catch(a){console.error("[Background] Failed to handle tab activation:",a)}});setInterval(async()=>{const a=Date.now()-p,t=5*6e4,{timerState:i}=await o(["timerState"]);a>t&&(!(i!=null&&i.isActive)||i.isPaused)&&(await h(),console.log("[Background] Auto-reset after idle"))},3e4);function A(){p=Date.now()}async function s(){const e=await chrome.tabs.query({}),{timerState:a}=await o(["timerState"]);for(const t of e)if(!(!t.id||!/^https?:\/\//.test(t.url||"")))try{await chrome.scripting.executeScript({target:{tabId:t.id},files:["content-script.js"]}),k.add(t.id),a!=null&&a.isActive?await chrome.tabs.sendMessage(t.id,{action:a.isPaused?"timerPaused":"timerStarted",timerState:a}):await chrome.tabs.sendMessage(t.id,{action:"timerReset",timerState:l})}catch(i){console.error(`Failed to handle tab ${t.id}:`,i)}}chrome.runtime.onMessage.addListener((e,a,t)=>((async()=>{A();const n=(await o(["timerState"])).timerState||l;switch(e.action){case"globalRestart":E().then(()=>t({status:"Timer restarted globally"})).catch(m=>t({status:"error",error:m.toString()}));break;case"startTimer":await M(e.interval,e.mode),t({status:"Timer started"});break;case"resumeTimer":await D(n),t({status:"Timer resumed"});break;case"pauseTimer":{const m=await I(n);await c({action:"timerPaused",timerState:m}),t({status:"Timer paused"})}break;case"resetTimer":await h(),await c({action:"timerReset",timerState:l}),await s(),t({status:"Timer reset"});break;case"snoozeTimer":await B(),await s(),t({status:"Timer snoozed"});break;case"closeOverlay":await c({action:"removeOverlay"}),t({status:"Overlay closed globally"});break;default:console.warn("[Background] Unknown action:",e.action),t({status:"Unknown action"});break}})(),!0));async function c(e){const a=await chrome.tabs.query({});for(const t of a)if(t.id)try{await chrome.tabs.sendMessage(t.id,e)}catch(i){console.error(`Failed to notify tab ${t.id}:`,i)}}async function M(e,a){const t=Date.now(),i=t+e*6e4,n={isActive:!0,isPaused:!1,timeLeft:e*60,mode:a,interval:e,isBlinking:!1,startTime:t,endTime:i};await f(n),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:i}),b(),await s(),await c({action:"timerStarted",timerState:n})}function b(){r&&clearInterval(r),r=setInterval(async()=>{const{timerState:e}=await o(["timerState"]);if(!e||!e.isActive||e.isPaused||!e.endTime){clearInterval(r),r=null;return}const a=Date.now(),t=e.endTime-a;let i=Math.floor(t/1e3);if(i<0&&(i=0),i<=0){clearInterval(r),r=null;return}const n={...e,timeLeft:i};await f(n)},1e3)}async function I(e){if(e.isActive&&!e.isPaused&&e.endTime){const a=Date.now(),t=Math.max(0,e.endTime-a),i=Math.floor(t/1e3);chrome.alarms.clear("mindfulnessTimer"),r&&(clearInterval(r),r=null);const n={...e,isPaused:!0,timeLeft:i,endTime:null};return await f(n),n}return e}async function D(e){if(e.isActive&&e.isPaused&&e.timeLeft>0){const a=Date.now(),t=a+e.timeLeft*1e3,i={...e,isPaused:!1,startTime:a,endTime:t};await f(i),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:t}),b(),await s(),await c({action:"timerResumed",timerState:i})}}async function h(){r&&(clearInterval(r),r=null),await f(l),chrome.alarms.clear("mindfulnessTimer"),await s()}async function E(){await h();const e=await o(["interval","timerMode"]),a=e.interval??T.interval,t=e.timerMode??T.timerMode;await M(a,t),await s()}async function B(){const e=Date.now(),a=e+5*6e4,t={...l,isActive:!0,timeLeft:5*60,mode:"shortBreak",interval:5,startTime:e,endTime:a};await f(t),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:a}),b(),await s(),await c({action:"timerStarted",timerState:t})}async function f(e){await S({timerState:e}),await c({action:"timerUpdated",timerState:e})}chrome.alarms.onAlarm.addListener(async e=>{if(e.name==="mindfulnessTimer"){const{soundEnabled:a,selectedSound:t,timerState:i,showQuotes:n}=await o(["soundEnabled","selectedSound","timerState","showQuotes"]),m=i||l;if(m.isActive&&!m.isPaused){await h();let v=null;n&&(v=q());let g=null;a&&t&&(g=chrome.runtime.getURL(`sounds/${t}.mp3`));const L=await chrome.windows.getAll({populate:!0}),y=[];L.forEach(d=>{var w;(w=d.tabs)==null||w.forEach(u=>{u.active&&y.push(u)})});const P=await chrome.tabs.query({});for(const d of P){if(!d.id)continue;const w=y.some(u=>u.id===d.id);try{await C(d.id,{action:"timerCompleted",quote:v,soundUrl:g,isActive:w})}catch(u){console.error(`Failed to send timerCompleted to tab ${d.id}:`,u)}}}}});function q(){const e=["Be mindful in the moment.","Focus on what matters now.","Take a breath and refocus.","Small steps lead to big results."];return e[Math.floor(Math.random()*e.length)]}function C(e,a){return new Promise((t,i)=>{chrome.tabs.sendMessage(e,a,()=>{const n=chrome.runtime.lastError;n?(console.error(`Error sending message to tab ${e}:`,n),i(n)):t()})})}
