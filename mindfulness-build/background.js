import{s,g as c}from"./storage.js";let y=Date.now();const f={isActive:!1,isPaused:!1,timeLeft:15*60,mode:"custom",interval:15,isBlinking:!1,startTime:null,endTime:null};chrome.runtime.onInstalled.addListener(async()=>{await s({interval:15,soundEnabled:!0,theme:"light",soundVolume:50,autoStartTimer:!1,showQuotes:!0,quoteChangeInterval:60,selectedSound:"gentle-bell",timerMode:"custom",quoteCategory:"all",minimalMode:!1,extensionClosed:!1,timerState:f}),console.log("[Background] Extension installed and default settings set.")});chrome.tabs.onUpdated.addListener(async(e,o,t)=>{if(o.status==="complete"&&t.url){const{extensionClosed:a}=await c(["extensionClosed"]);if(!a)try{await chrome.scripting.executeScript({target:{tabId:e},files:["content-script.js"]}),console.log(`[Background] Injected content-script.js into tab ${e}`)}catch(n){console.error(`Failed to inject content script into tab ${e}:`,n)}}});chrome.tabs.onActivated.addListener(async e=>{k();const{extensionClosed:o}=await c(["extensionClosed"]);if(!o){const t=e.tabId;chrome.tabs.get(t,async a=>{if(a&&/^https?:\/\//.test(a.url??""))try{await chrome.scripting.executeScript({target:{tabId:t},files:["content-script.js"]}),console.log(`[Background] Injected content-script.js into tab ${t}`)}catch(n){console.error(`Failed to inject content script into tab ${t}:`,n)}})}});setInterval(async()=>{const o=Date.now()-y,t=5*6e4,{extensionClosed:a,timerState:n}=await c(["extensionClosed","timerState"]);!a&&o>t&&(!(n!=null&&n.isActive)||n.isPaused)&&(await u(),console.log("[Background] Auto-reset after idle"))},3e4);function k(){y=Date.now()}chrome.runtime.onMessage.addListener((e,o,t)=>((async()=>{k();const a=await c(["extensionClosed","timerState"]);let n=a.extensionClosed??!1;const l=a.timerState||f;switch(e.action){case"globalRestart":await u();const g=await chrome.tabs.query({});for(const m of g)if(m.id)try{await h(m.id,{action:"timerRestarted"})}catch(w){console.error(`Failed to send restart message to tab ${m.id}:`,w)}const d=await c(["interval","timerMode"]);await b(d.interval||15,d.timerMode||"focus"),t({status:"Timer restarted globally"});break;case"startTimer":case"resumeTimer":n&&(await s({extensionClosed:!1}),n=!1,await A(),console.log("[Background] Auto-reopened extension on Start/Resume")),e.action==="startTimer"?(await b(e.interval,e.mode),t({status:"Timer started"}),console.log("[Background] Timer started.")):(await v(l),t({status:"Timer resumed"}),console.log("[Background] Timer resumed."));break;case"pauseTimer":await p(l),t({status:"Timer paused"}),console.log("[Background] Timer paused.");break;case"resetTimer":await u(),t({status:"Timer reset"}),console.log("[Background] Timer reset.");break;case"snoozeTimer":await S(),t({status:"Timer snoozed"}),console.log("[Background] Timer snoozed.");break;case"closeOverlay":await u(),await s({extensionClosed:!0}),await x({action:"removeOverlay"}),console.log("[Background] Overlay closed globally."),t({status:"Overlay closed globally"});break;default:console.warn("[Background] Received unknown action:",e.action),t({status:"Unknown action"});break}})(),!0));async function b(e,o){const t=Date.now(),a=t+e*6e4,n={isActive:!0,isPaused:!1,timeLeft:e*60,mode:o,interval:e,isBlinking:!1,startTime:t,endTime:a};await s({timerState:n}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:a}),console.log(`[Background] Timer started for ${e} minutes.`)}async function p(e){if(e.isActive&&!e.isPaused&&e.endTime){const o=Date.now(),t=Math.max(0,e.endTime-o),a=Math.floor(t/1e3);chrome.alarms.clear("mindfulnessTimer");const n={...e,isPaused:!0,timeLeft:a,endTime:null};await s({timerState:n}),console.log("[Background] Timer paused.")}}async function v(e){if(e.isActive&&e.isPaused&&e.timeLeft>0){const o=Date.now(),t=o+e.timeLeft*1e3,a={...e,isPaused:!1,endTime:t,startTime:o};await s({timerState:a}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:t}),console.log("[Background] Timer resumed.")}}async function u(){await s({timerState:f}),chrome.alarms.clear("mindfulnessTimer"),console.log("[Background] Timer reset.")}async function S(){const e=Date.now(),o=e+5*6e4,t={...f,isActive:!0,timeLeft:5*60,mode:"shortBreak",interval:5,startTime:e,endTime:o};await s({timerState:t}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:o}),console.log("[Background] Timer snoozed for 5 minutes.")}chrome.alarms.onAlarm.addListener(async e=>{if(e.name==="mindfulnessTimer"){const{soundEnabled:o,selectedSound:t,timerState:a,showQuotes:n}=await c(["soundEnabled","selectedSound","timerState","showQuotes"]),l=a||f;if(l.isActive&&!l.isPaused){await u();let g=null;n&&(g=B());let d=null;o&&t&&(d=chrome.runtime.getURL(`sounds/${t}.mp3`));const m=await chrome.tabs.query({}),w=[];(await chrome.windows.getAll({populate:!0})).forEach(i=>{var T;(T=i.tabs)==null||T.forEach(r=>{r.active&&w.push(r)})});for(const i of m){if(i.id===void 0)continue;const T=w.some(r=>r.id===i.id);try{await h(i.id,{action:"timerCompleted",quote:g,soundUrl:d,isActive:T}),console.log(`[Background] Sent timerCompleted to tab ${i.id}`)}catch(r){console.error(`Failed to send timerCompleted to tab ${i.id}:`,r)}}}}});function B(){const e=["Be mindful in the moment.","Focus on what matters now.","Take a breath and refocus.","Small steps lead to big results."],o=Math.floor(Math.random()*e.length);return e[o]}async function x(e){const o=await chrome.tabs.query({});for(const t of o)if(t.id!==void 0)try{await h(t.id,e),console.log(`[Background] Sent message to tab ${t.id}:`,e)}catch(a){console.error(`Failed to send message to tab ${t.id}:`,a)}}async function A(){const e=await chrome.tabs.query({});for(const o of e)if(!(o.id===void 0||!/^https?:\/\//.test(o.url??"")))try{await chrome.scripting.executeScript({target:{tabId:o.id},files:["content-script.js"]}),console.log(`[Background] Injected content-script.js into tab ${o.id}`)}catch(t){console.error(`Failed to inject content script into tab ${o.id}:`,t)}}function h(e,o){return new Promise((t,a)=>{chrome.tabs.sendMessage(e,o,n=>{chrome.runtime.lastError?(console.error(`Error sending message to tab ${e}:`,chrome.runtime.lastError),a(chrome.runtime.lastError)):t()})})}
