import{s as c,g as d}from"./storage.js";let T=Date.now();const g={isActive:!1,isPaused:!1,timeLeft:15*60,mode:"custom",interval:15,isBlinking:!1,startTime:null,endTime:null},b={interval:15,soundEnabled:!0,theme:"light",soundVolume:50,autoStartTimer:!1,showQuotes:!0,quoteChangeInterval:60,selectedSound:"gentle-bell",timerMode:"focus",quoteCategory:"all",minimalMode:!1};chrome.runtime.onInstalled.addListener(async()=>{await c({interval:15,soundEnabled:!0,theme:"light",soundVolume:50,autoStartTimer:!1,showQuotes:!0,quoteChangeInterval:60,selectedSound:"gentle-bell",timerMode:"custom",quoteCategory:"all",minimalMode:!1,extensionClosed:!1,timerState:g}),console.log("[Background] Extension installed and default settings set.")});chrome.tabs.onUpdated.addListener(async(e,a,t)=>{if(a.status==="complete"&&t.url){const{extensionClosed:o}=await d(["extensionClosed"]);if(!o)try{await chrome.scripting.executeScript({target:{tabId:e},files:["content-script.js"]}),console.log(`[Background] Injected content-script.js into tab ${e}`)}catch(s){console.error(`Failed to inject content script into tab ${e}:`,s)}}});chrome.tabs.onActivated.addListener(async e=>{y();const{extensionClosed:a}=await d(["extensionClosed"]);if(!a){const t=e.tabId;chrome.tabs.get(t,async o=>{if(o&&/^https?:\/\//.test(o.url??""))try{await chrome.scripting.executeScript({target:{tabId:t},files:["content-script.js"]}),console.log(`[Background] Injected content-script.js into tab ${t}`)}catch(s){console.error(`Failed to inject content script into tab ${t}:`,s)}})}});setInterval(async()=>{const a=Date.now()-T,t=5*6e4,{extensionClosed:o,timerState:s}=await d(["extensionClosed","timerState"]);!o&&a>t&&(!(s!=null&&s.isActive)||s.isPaused)&&(await f(),console.log("[Background] Auto-reset after idle"))},3e4);function y(){T=Date.now()}chrome.runtime.onMessage.addListener((e,a,t)=>((async()=>{y();const o=await d(["extensionClosed","timerState"]);let s=o.extensionClosed??!1;const i=o.timerState||g;switch(e.action){case"globalRestart":console.log("[Background] Handling globalRestart");try{await B();const r=await chrome.tabs.query({});for(const n of r)if(n.id)try{await chrome.tabs.sendMessage(n.id,{action:"timerRestarted",timerState:await d(["timerState"])})}catch(u){console.error(`Failed to notify tab ${n.id}:`,u)}t({status:"Timer restarted globally"})}catch(r){const n=r instanceof Error?r.message:"Unknown error occurred";console.error("[Background] globalRestart failed:",r),t({status:"error",error:n})}break;case"startTimer":case"resumeTimer":s&&(await c({extensionClosed:!1}),s=!1,await C(),console.log("[Background] Auto-reopened extension on Start/Resume")),e.action==="startTimer"?(await S(e.interval,e.mode),t({status:"Timer started"}),console.log("[Background] Timer started.")):(await p(i),t({status:"Timer resumed"}),console.log("[Background] Timer resumed."));break;case"pauseTimer":await v(i),t({status:"Timer paused"}),console.log("[Background] Timer paused.");break;case"resetTimer":await f(),t({status:"Timer reset"}),console.log("[Background] Timer reset.");break;case"snoozeTimer":await x(),t({status:"Timer snoozed"}),console.log("[Background] Timer snoozed.");break;case"closeOverlay":await f(),await c({extensionClosed:!0}),await A({action:"removeOverlay"}),console.log("[Background] Overlay closed globally."),t({status:"Overlay closed globally"});break;default:console.warn("[Background] Received unknown action:",e.action),t({status:"Unknown action"});break}})(),!0));async function S(e,a){const t=Date.now(),o=t+e*60*1e3,s={isActive:!0,isPaused:!1,timeLeft:e*60,mode:a,interval:e,isBlinking:!1,startTime:t,endTime:o};await c({timerState:s}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:o});const i=await chrome.tabs.query({});for(const r of i)if(r.id&&/^https?:\/\//.test(r.url??""))try{try{await chrome.tabs.sendMessage(r.id,{action:"timerStarted",timerState:s})}catch{await chrome.scripting.executeScript({target:{tabId:r.id},files:["content-script.js"]}),await chrome.tabs.sendMessage(r.id,{action:"timerStarted",timerState:s})}}catch(n){console.error(`Failed to handle tab ${r.id}:`,n)}}async function v(e){if(e.isActive&&!e.isPaused&&e.endTime){const a=Date.now(),t=Math.max(0,e.endTime-a),o=Math.floor(t/1e3);chrome.alarms.clear("mindfulnessTimer");const s={...e,isPaused:!0,timeLeft:o,endTime:null};await c({timerState:s}),console.log("[Background] Timer paused.")}}async function p(e){if(e.isActive&&e.isPaused&&e.timeLeft>0){const a=Date.now(),t=a+e.timeLeft*1e3,o={...e,isPaused:!1,startTime:a,endTime:t};await c({timerState:o}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:t});const s=await chrome.tabs.query({});for(const i of s)if(i.id)try{await chrome.tabs.sendMessage(i.id,{action:"timerResumed",timerState:o,timeLeft:e.timeLeft})}catch(r){console.error(`Failed to notify tab ${i.id}:`,r)}console.log("[Background] Timer resumed and all tabs notified.")}}async function f(){await c({timerState:g}),chrome.alarms.clear("mindfulnessTimer"),console.log("[Background] Timer reset.")}async function B(){await f();const e=await d(["interval","timerMode"]),a=e.interval??b.interval,t=e.timerMode??b.timerMode,o=Date.now(),s=o+a*60*1e3,i={isActive:!0,isPaused:!1,timeLeft:a*60,mode:t,interval:a,isBlinking:!1,startTime:o,endTime:s};await c({timerState:i}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:s});const r=await chrome.tabs.query({});for(const n of r)if(n.id)try{await chrome.tabs.sendMessage(n.id,{action:"timerRestarted",timerState:i,timeLeft:a*60,mode:t,interval:a})}catch(u){console.error(`Failed to notify tab ${n.id}:`,u)}console.log("[Background] Timer restarted globally.")}async function x(){const e=Date.now(),a=e+5*6e4,t={...g,isActive:!0,timeLeft:5*60,mode:"shortBreak",interval:5,startTime:e,endTime:a};await c({timerState:t}),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:a}),console.log("[Background] Timer snoozed for 5 minutes.")}chrome.alarms.onAlarm.addListener(async e=>{if(e.name==="mindfulnessTimer"){const{soundEnabled:a,selectedSound:t,timerState:o,showQuotes:s}=await d(["soundEnabled","selectedSound","timerState","showQuotes"]),i=o||g;if(i.isActive&&!i.isPaused){await f();let r=null;s&&(r=M());let n=null;a&&t&&(n=chrome.runtime.getURL(`sounds/${t}.mp3`));const u=await chrome.tabs.query({}),h=[];(await chrome.windows.getAll({populate:!0})).forEach(l=>{var w;(w=l.tabs)==null||w.forEach(m=>{m.active&&h.push(m)})});for(const l of u){if(l.id===void 0)continue;const w=h.some(m=>m.id===l.id);try{await k(l.id,{action:"timerCompleted",quote:r,soundUrl:n,isActive:w}),console.log(`[Background] Sent timerCompleted to tab ${l.id}`)}catch(m){console.error(`Failed to send timerCompleted to tab ${l.id}:`,m)}}}}});function M(){const e=["Be mindful in the moment.","Focus on what matters now.","Take a breath and refocus.","Small steps lead to big results."],a=Math.floor(Math.random()*e.length);return e[a]}async function A(e){const a=await chrome.tabs.query({});for(const t of a)if(t.id!==void 0)try{await k(t.id,e),console.log(`[Background] Sent message to tab ${t.id}:`,e)}catch(o){console.error(`Failed to send message to tab ${t.id}:`,o)}}async function C(){const e=await chrome.tabs.query({});for(const a of e)if(!(a.id===void 0||!/^https?:\/\//.test(a.url??"")))try{await chrome.scripting.executeScript({target:{tabId:a.id},files:["content-script.js"]}),console.log(`[Background] Injected content-script.js into tab ${a.id}`)}catch(t){console.error(`Failed to inject content script into tab ${a.id}:`,t)}}function k(e,a){return new Promise((t,o)=>{chrome.tabs.sendMessage(e,a,s=>{chrome.runtime.lastError?(console.error(`Error sending message to tab ${e}:`,chrome.runtime.lastError),o(chrome.runtime.lastError)):t()})})}
