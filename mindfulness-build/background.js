import{s as y,g as c}from"./storage.js";let v=Date.now(),S=new Set;const o={isActive:!1,isPaused:!1,timeLeft:15*60,mode:"custom",interval:15,isBlinking:!1,startTime:null,endTime:null},h={interval:15,soundEnabled:!0,theme:"light",soundVolume:50,autoStartTimer:!1,showQuotes:!0,quoteChangeInterval:60,selectedSound:"gentle-bell",timerMode:"focus",quoteCategory:"all",minimalMode:!1};chrome.runtime.onInstalled.addListener(async()=>{await y({...h,timerState:o}),console.log("[Background] Extension installed and default settings set.")});chrome.action.onClicked.addListener(()=>{chrome.windows.create({url:"index.html",type:"popup",width:400,height:600,focused:!0})});chrome.tabs.onRemoved.addListener(e=>{S.delete(e)});chrome.tabs.onUpdated.addListener(async(e,a,t)=>{if(a.status==="complete"&&t.url){const{timerState:i}=await c(["timerState"]);if(i!=null&&i.isActive)try{await s()}catch(r){console.error(`Failed to handle tab update for ${e}:`,r)}}});chrome.tabs.onActivated.addListener(async()=>{p();const{timerState:e}=await c(["timerState"]);if(e!=null&&e.isActive)try{await s()}catch(a){console.error("[Background] Failed to handle tab activation:",a)}});setInterval(async()=>{const a=Date.now()-v,t=5*6e4,{timerState:i}=await c(["timerState"]);a>t&&(!(i!=null&&i.isActive)||i.isPaused)&&(await f(),console.log("[Background] Auto-reset after idle"))},3e4);function p(){v=Date.now()}async function s(){const e=await chrome.tabs.query({}),{timerState:a}=await c(["timerState"]);for(const t of e)if(!(!t.id||!/^https?:\/\//.test(t.url||"")))try{await chrome.scripting.executeScript({target:{tabId:t.id},files:["content-script.js"]}),S.add(t.id),a!=null&&a.isActive?await chrome.tabs.sendMessage(t.id,{action:a.isPaused?"timerPaused":"timerStarted",timerState:a}):await chrome.tabs.sendMessage(t.id,{action:"timerReset",timerState:o})}catch(i){console.error(`Failed to handle tab ${t.id}:`,i)}}chrome.runtime.onMessage.addListener((e,a,t)=>((async()=>{p();const r=(await c(["timerState"])).timerState||o;switch(e.action){case"globalRestart":E().then(()=>{t({status:"Timer restarted globally"})}).catch(m=>{t({status:"error",error:m.toString()})});break;case"startTimer":await k(e.interval,e.mode),t({status:"Timer started"});break;case"resumeTimer":await P(r),t({status:"Timer resumed"});break;case"pauseTimer":{const m=await L(r);await n({action:"timerPaused",timerState:m}),t({status:"Timer paused"})}break;case"resetTimer":await f(),await n({action:"timerReset",timerState:o}),await s(),t({status:"Timer reset"});break;case"snoozeTimer":await D(),await s(),t({status:"Timer snoozed"});break;case"closeOverlay":await n({action:"removeOverlay"}),t({status:"Overlay closed globally"});break;default:console.warn("[Background] Unknown action:",e.action),t({status:"Unknown action"});break}})(),!0));async function n(e){const a=await chrome.tabs.query({});for(const t of a)if(t.id)try{await chrome.tabs.sendMessage(t.id,e)}catch(i){console.error(`Failed to notify tab ${t.id}:`,i)}}async function k(e,a){const t=Date.now(),i=t+e*6e4,r={isActive:!0,isPaused:!1,timeLeft:e*60,mode:a,interval:e,isBlinking:!1,startTime:t,endTime:i};await u(r),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:i}),await s(),await n({action:"timerStarted",timerState:r})}async function L(e){if(e.isActive&&!e.isPaused&&e.endTime){const a=Date.now(),t=Math.max(0,e.endTime-a),i=Math.floor(t/1e3);chrome.alarms.clear("mindfulnessTimer");const r={...e,isPaused:!0,timeLeft:i,endTime:null};return await u(r),r}return e}async function P(e){if(e.isActive&&e.isPaused&&e.timeLeft>0){const a=Date.now(),t=a+e.timeLeft*1e3,i={...e,isPaused:!1,startTime:a,endTime:t};await u(i),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:t}),await s(),await n({action:"timerResumed",timerState:i})}}async function f(){await u(o),chrome.alarms.clear("mindfulnessTimer"),await s()}async function E(){await f();const e=await c(["interval","timerMode"]),a=e.interval??h.interval,t=e.timerMode??h.timerMode;await k(a,t),await s()}async function D(){const e=Date.now(),a=e+5*6e4,t={...o,isActive:!0,timeLeft:5*60,mode:"shortBreak",interval:5,startTime:e,endTime:a};await u(t),chrome.alarms.clear("mindfulnessTimer"),chrome.alarms.create("mindfulnessTimer",{when:a}),await s(),await n({action:"timerStarted",timerState:t})}async function u(e){await y({timerState:e}),await n({action:"timerUpdated",timerState:e})}chrome.alarms.onAlarm.addListener(async e=>{if(e.name==="mindfulnessTimer"){const{soundEnabled:a,selectedSound:t,timerState:i,showQuotes:r}=await c(["soundEnabled","selectedSound","timerState","showQuotes"]),m=i||o;if(m.isActive&&!m.isPaused){await f();let T=null;r&&(T=B());let b=null;a&&t&&(b=chrome.runtime.getURL(`sounds/${t}.mp3`));const A=await chrome.windows.getAll({populate:!0}),g=[];A.forEach(d=>{var w;(w=d.tabs)==null||w.forEach(l=>{l.active&&g.push(l)})});const M=await chrome.tabs.query({});for(const d of M){if(!d.id)continue;const w=g.some(l=>l.id===d.id);try{await q(d.id,{action:"timerCompleted",quote:T,soundUrl:b,isActive:w})}catch(l){console.error(`Failed to send timerCompleted to tab ${d.id}:`,l)}}}}});function B(){const e=["Be mindful in the moment.","Focus on what matters now.","Take a breath and refocus.","Small steps lead to big results."];return e[Math.floor(Math.random()*e.length)]}function q(e,a){return new Promise((t,i)=>{chrome.tabs.sendMessage(e,a,()=>{const r=chrome.runtime.lastError;r?(console.error(`Error sending message to tab ${e}:`,r),i(r)):t()})})}
